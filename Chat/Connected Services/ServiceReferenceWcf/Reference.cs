//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chat.ServiceReferenceWcf {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateMessage", Namespace="http://schemas.datacontract.org/2004/07/ChatTask")]
    [System.SerializableAttribute()]
    public partial class PrivateMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrivateMessageChatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateMessageColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrivateMessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateMessageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrivateMessageSenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateMessageTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateMessageChatId {
            get {
                return this.PrivateMessageChatIdField;
            }
            set {
                if ((this.PrivateMessageChatIdField.Equals(value) != true)) {
                    this.PrivateMessageChatIdField = value;
                    this.RaisePropertyChanged("PrivateMessageChatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateMessageColor {
            get {
                return this.PrivateMessageColorField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateMessageColorField, value) != true)) {
                    this.PrivateMessageColorField = value;
                    this.RaisePropertyChanged("PrivateMessageColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateMessageId {
            get {
                return this.PrivateMessageIdField;
            }
            set {
                if ((this.PrivateMessageIdField.Equals(value) != true)) {
                    this.PrivateMessageIdField = value;
                    this.RaisePropertyChanged("PrivateMessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateMessageName {
            get {
                return this.PrivateMessageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateMessageNameField, value) != true)) {
                    this.PrivateMessageNameField = value;
                    this.RaisePropertyChanged("PrivateMessageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrivateMessageSenderId {
            get {
                return this.PrivateMessageSenderIdField;
            }
            set {
                if ((this.PrivateMessageSenderIdField.Equals(value) != true)) {
                    this.PrivateMessageSenderIdField = value;
                    this.RaisePropertyChanged("PrivateMessageSenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateMessageText {
            get {
                return this.PrivateMessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateMessageTextField, value) != true)) {
                    this.PrivateMessageTextField = value;
                    this.RaisePropertyChanged("PrivateMessageText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMessage", Namespace="http://schemas.datacontract.org/2004/07/ChatTask")]
    [System.SerializableAttribute()]
    public partial class GroupMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupMessageColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupMessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupMessageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupMessageTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupMessageColor {
            get {
                return this.GroupMessageColorField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupMessageColorField, value) != true)) {
                    this.GroupMessageColorField = value;
                    this.RaisePropertyChanged("GroupMessageColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupMessageId {
            get {
                return this.GroupMessageIdField;
            }
            set {
                if ((this.GroupMessageIdField.Equals(value) != true)) {
                    this.GroupMessageIdField = value;
                    this.RaisePropertyChanged("GroupMessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupMessageName {
            get {
                return this.GroupMessageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupMessageNameField, value) != true)) {
                    this.GroupMessageNameField = value;
                    this.RaisePropertyChanged("GroupMessageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupMessageText {
            get {
                return this.GroupMessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupMessageTextField, value) != true)) {
                    this.GroupMessageTextField = value;
                    this.RaisePropertyChanged("GroupMessageText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Users", Namespace="http://schemas.datacontract.org/2004/07/ChatTask")]
    [System.SerializableAttribute()]
    public partial class Users : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserColor {
            get {
                return this.UserColorField;
            }
            set {
                if ((object.ReferenceEquals(this.UserColorField, value) != true)) {
                    this.UserColorField = value;
                    this.RaisePropertyChanged("UserColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPassword {
            get {
                return this.UserPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPasswordField, value) != true)) {
                    this.UserPasswordField = value;
                    this.RaisePropertyChanged("UserPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceWcf.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        void AddUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPrivateMessage", ReplyAction="http://tempuri.org/IService1/AddPrivateMessageResponse")]
        void AddPrivateMessage(Chat.ServiceReferenceWcf.PrivateMessage privateMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPrivateMessage", ReplyAction="http://tempuri.org/IService1/AddPrivateMessageResponse")]
        System.Threading.Tasks.Task AddPrivateMessageAsync(Chat.ServiceReferenceWcf.PrivateMessage privateMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGroupMessage", ReplyAction="http://tempuri.org/IService1/AddGroupMessageResponse")]
        void AddGroupMessage(Chat.ServiceReferenceWcf.GroupMessage groupMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGroupMessage", ReplyAction="http://tempuri.org/IService1/AddGroupMessageResponse")]
        System.Threading.Tasks.Task AddGroupMessageAsync(Chat.ServiceReferenceWcf.GroupMessage groupMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUser", ReplyAction="http://tempuri.org/IService1/CheckUserResponse")]
        bool CheckUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUser", ReplyAction="http://tempuri.org/IService1/CheckUserResponse")]
        System.Threading.Tasks.Task<bool> CheckUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByName", ReplyAction="http://tempuri.org/IService1/GetUserByNameResponse")]
        Chat.ServiceReferenceWcf.Users GetUserByName(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserByName", ReplyAction="http://tempuri.org/IService1/GetUserByNameResponse")]
        System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.Users> GetUserByNameAsync(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsersWithoutThisId", ReplyAction="http://tempuri.org/IService1/GetUsersWithoutThisIdResponse")]
        Chat.ServiceReferenceWcf.Users[] GetUsersWithoutThisId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsersWithoutThisId", ReplyAction="http://tempuri.org/IService1/GetUsersWithoutThisIdResponse")]
        System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.Users[]> GetUsersWithoutThisIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupMessages", ReplyAction="http://tempuri.org/IService1/GetGroupMessagesResponse")]
        Chat.ServiceReferenceWcf.GroupMessage[] GetGroupMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGroupMessages", ReplyAction="http://tempuri.org/IService1/GetGroupMessagesResponse")]
        System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.GroupMessage[]> GetGroupMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPrivateMessages", ReplyAction="http://tempuri.org/IService1/GetPrivateMessagesResponse")]
        Chat.ServiceReferenceWcf.PrivateMessage[] GetPrivateMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPrivateMessages", ReplyAction="http://tempuri.org/IService1/GetPrivateMessagesResponse")]
        System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.PrivateMessage[]> GetPrivateMessagesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Chat.ServiceReferenceWcf.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Chat.ServiceReferenceWcf.IService1>, Chat.ServiceReferenceWcf.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUser(string username, string password) {
            base.Channel.AddUser(username, password);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(string username, string password) {
            return base.Channel.AddUserAsync(username, password);
        }
        
        public void AddPrivateMessage(Chat.ServiceReferenceWcf.PrivateMessage privateMessage) {
            base.Channel.AddPrivateMessage(privateMessage);
        }
        
        public System.Threading.Tasks.Task AddPrivateMessageAsync(Chat.ServiceReferenceWcf.PrivateMessage privateMessage) {
            return base.Channel.AddPrivateMessageAsync(privateMessage);
        }
        
        public void AddGroupMessage(Chat.ServiceReferenceWcf.GroupMessage groupMessage) {
            base.Channel.AddGroupMessage(groupMessage);
        }
        
        public System.Threading.Tasks.Task AddGroupMessageAsync(Chat.ServiceReferenceWcf.GroupMessage groupMessage) {
            return base.Channel.AddGroupMessageAsync(groupMessage);
        }
        
        public bool CheckUser(string username, string password) {
            return base.Channel.CheckUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserAsync(string username, string password) {
            return base.Channel.CheckUserAsync(username, password);
        }
        
        public Chat.ServiceReferenceWcf.Users GetUserByName(string name, string password) {
            return base.Channel.GetUserByName(name, password);
        }
        
        public System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.Users> GetUserByNameAsync(string name, string password) {
            return base.Channel.GetUserByNameAsync(name, password);
        }
        
        public Chat.ServiceReferenceWcf.Users[] GetUsersWithoutThisId(int id) {
            return base.Channel.GetUsersWithoutThisId(id);
        }
        
        public System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.Users[]> GetUsersWithoutThisIdAsync(int id) {
            return base.Channel.GetUsersWithoutThisIdAsync(id);
        }
        
        public Chat.ServiceReferenceWcf.GroupMessage[] GetGroupMessages() {
            return base.Channel.GetGroupMessages();
        }
        
        public System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.GroupMessage[]> GetGroupMessagesAsync() {
            return base.Channel.GetGroupMessagesAsync();
        }
        
        public Chat.ServiceReferenceWcf.PrivateMessage[] GetPrivateMessages() {
            return base.Channel.GetPrivateMessages();
        }
        
        public System.Threading.Tasks.Task<Chat.ServiceReferenceWcf.PrivateMessage[]> GetPrivateMessagesAsync() {
            return base.Channel.GetPrivateMessagesAsync();
        }
    }
}
